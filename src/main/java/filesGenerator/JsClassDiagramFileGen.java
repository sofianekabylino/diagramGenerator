package filesGenerator;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

import diagramGen.diagramGen.JSONArrayCreator;
import processors.AnalyseProcessorClasses;

import processors.GenerateLinkBetweenClassesProcessor;

public class JsClassDiagramFileGen {
	
	public static void jsClassDiagramFileGen(){
	    
	    String fileContent =   "function init() {\n"
	    		+"    var $ = go.GraphObject.make;\n"
	    		+"    myDiagram =\n"
	    		+"$(go.Diagram, 'myDiagram',  // must name or refer to the DIV HTML element\n"
	    		+"{\n"
	    		+"initialAutoScale: go.Diagram.Uniform,  // an initial automatic zoom-to-fit\n"
	    		+"contentAlignment: go.Spot.Center,  // align document to the center of the viewport\n"
	    		+"layout:\n"
	    		+"$(go.ForceDirectedLayout,  // automatically spread nodes apart\n"
	    		+"{ defaultSpringLength: 30, defaultElectricalCharge: 100 })\n"
	    		+"});\n"
	    		+"// define each Node's appearance\n"
	    		+"myDiagram.nodeTemplate =\n"
	    		+"$(go.Node, 'Auto',  // the whole node panel\n"
	    		+"// define the node's outer shape, which will surround the TextBlock\n"
	    		+"$(go.Shape, 'Rectangle',\n"
	    		+"{ fill: $(go.Brush, 'Linear', { 0: 'rgb(254, 201, 0)', 1: 'rgb(254, 162, 0)' }), stroke: 'black' }),\n"
	    		+"$(go.TextBlock,\n"
	    		+"{ font: 'bold 10pt helvetica, bold arial, sans-serif', margin: 4 },\n"
	    		+"new go.Binding('text', 'text'))\n"
	    		+");\n"
	    		+"    // show visibility or access as a single character at the beginning of each property or method\n"
	    		+"    function convertVisibility(v) {\n"
	    		+"      switch (v) {\n"
	    		+"        case 'public': return '+';\n"
	    		+"        case 'private': return '-';\n"
	    		+"        case 'protected': return '#';\n"
	    		+"        case 'package': return '~';\n"
	    		+"        default: return v;\n"
	    		+"      }\n"
	    		+"    }\n"
	    		+"    // the item template for properties\n"
	    		+"    var propertyTemplate =\n"
	    		+"      $(go.Panel, 'Horizontal',\n"
	    		+"        // property visibility/access\n"
	    		+"        $(go.TextBlock,\n"
	    		          +"{ isMultiline: false, editable: false, width: 12 },\n"
	    		          +"new go.Binding('text', 'visibility', convertVisibility)),\n"
	    		        +"// property name, underlined if scope=='class' to indicate static property\n"
	    		        +"$(go.TextBlock,\n"
	    		          +"{ isMultiline: false, editable: true },\n"
	    		          +"new go.Binding('text', 'name').makeTwoWay(),\n"
	    		          +"new go.Binding('isUnderline', 'scope', function(s) { return s[0] === 'c' })),\n"
	    		        +"// property type, if known\n"
	    		        +"$(go.TextBlock, '',\n"
	    		          +"new go.Binding('text', 'type', function(t) { return (t ? ': ' : ''); })),\n"
	    		        +"$(go.TextBlock,\n"
	    		          +"{ isMultiline: false, editable: true },\n"
	    		          +"new go.Binding('text', 'type').makeTwoWay()),\n"
	    		        +"// property default value, if any\n"
	    		        +"$(go.TextBlock,\n"
	    		          +"{ isMultiline: false, editable: false },\n"
	    		          +"new go.Binding('text', 'default', function(s) { return s ? ' = ' + s : ''; }))\n"
	    		      +");\n"
	    		    +"// the item template for methods\n"
	    		    +"var methodTemplate =\n"
	    		      +"$(go.Panel, 'Horizontal',\n"
	    		        +"// method visibility/access\n"
	    		        +"$(go.TextBlock,\n"
	    		          +"{ isMultiline: false, editable: false, width: 12 },\n"
	    		          +"new go.Binding('text', 'visibility', convertVisibility)),\n"
	    		        +"// method name, underlined if scope=='class' to indicate static method\n"
	    		        +"$(go.TextBlock,\n"
	    		          +"{ isMultiline: false, editable: true },\n"
	    		          +"new go.Binding('text', 'name').makeTwoWay(),\n"
	    		          +"new go.Binding('isUnderline', 'scope', function(s) { return s[0] === 'c' })),\n"
	    		        +"// method parameters\n"
	    		        +"$(go.TextBlock, '()',\n"
	    		          +"// this does not permit adding/editing/removing of parameters via inplace edits\n"
	    		          +"new go.Binding('text', 'parameters', function(parr) {\n"
	    		              +"var s = '(';\n"
	    		              +"for (var i = 0; i < parr.length; i++) {\n"
	    		                +"var param = parr[i];\n"
	    		                +"if (i > 0) s += ', ';\n"
	    		                +"s += param.name + ': ' + param.type;\n"
	    		              +"}\n"
	    		              +"return s + ')';\n"
	    		          +"})),\n"
	    		        +"// method return type, if any\n"
	    		        +"$(go.TextBlock, '',\n"
	    		          +"new go.Binding('text', 'type', function(t) { return (t ? ': ' : ''); })),\n"
	    		        +"$(go.TextBlock,\n"
	    		          +"{ isMultiline: false, editable: true },\n"
	    		          +"new go.Binding('text', 'type').makeTwoWay())\n"
	    		      +");\n"
	    		    +"// this simple template does not have any buttons to permit adding or\n"
	    		    +"// removing properties or methods, but it could!\n"
	    		    +"myDiagram.nodeTemplate =\n"
	    		      +"$(go.Node, 'Auto',\n"
	    		        +"{\n"
	    		          +"locationSpot: go.Spot.Center,\n"
	    		          +"fromSpot: go.Spot.AllSides,\n"
	    		          +"toSpot: go.Spot.AllSides\n"
	    		        +"},\n"
	    		        +"$(go.Shape, { fill: 'lightyellow' }),\n"
	    		        +"$(go.Panel, 'Table',\n"
	    		          +"{ defaultRowSeparatorStroke: 'black' },\n"
	    		          +"// header\n"
	    		          +"$(go.TextBlock,\n"
	    		            +"{\n"
	    		              +"row: 0, margin: 3, alignment: go.Spot.Center,\n"
	    		              +"font: 'bold 12pt sans-serif',\n"
	    		              +"isMultiline: false, editable: true\n"
	    		            +"},\n"
	    		            +"new go.Binding('text', 'name').makeTwoWay()),\n"
	    		          +"// properties\n"
	    		          +"$(go.Panel, 'Vertical',\n"
	    		            +"new go.Binding('itemArray', 'properties'),\n"
	    		            +"{\n"
	    		              +"row: 1, margin: 3, alignment: go.Spot.Left,\n"
	    		              +"defaultAlignment: go.Spot.Left,\n"
	    		              +"itemTemplate: propertyTemplate\n"
	    		            +"}\n"
	    		          +"),\n"
	    		          +"// methods\n"
	    		          +"$(go.Panel, 'Vertical',\n"
	    		            +"new go.Binding('itemArray', 'methods'),\n"
	    		            +"{\n"
	    		              +"row: 2, margin: 3, alignment: go.Spot.Left,\n"
	    		              +"defaultAlignment: go.Spot.Left,\n"
	    		              +"itemTemplate: methodTemplate\n"
	    		            +"}\n"
	    		          +"))\n"
	    		      +");\n"
	    		    +"function convertIsTreeLink(r) {\n"
	    		      +"return r === 'generalization';\n"
	    		    +"}\n"
	    		    +"function convertFromArrow(r) {\n"
	    		      +"switch (r) {\n"
	    		        +"case 'generalization': return '';\n"
	    		        +"default: return '';\n"
	    		      +"}\n"
	    		    +"}\n"
	    		    +"function convertToArrow(r) {\n"
	    		      +"switch (r) {\n"
	    		        +"case 'generalization': return 'Triangle';\n"
	    		        +"//case 'aggregation': return 'StretchedDiamond';\n"
	    		        +"case 'aggregation': return 'OpenTriangle';\n"
	    		        +"case 'association': return 'OpenTriangle';\n"
	    		        +"case 'implements': return 'OpenTriangle';\n"
	    		        +"default: return '';\n"
	    		      +"}\n"
	    		    +"}\n"

	    		    +"function convertLink(r){\n"
	    		      +"switch (r) {\n"
	    		        +"case 'implements' : return [5,10];\n"
	    		      +"}\n"
	    		    +"}\n"

	    		    +"myDiagram.linkTemplate =\n"
	    		      +"$(go.Link,\n"
	    		        +"{ routing: go.Link.AvoidsNodes },\n"
	    		        +"new go.Binding('isLayoutPositioned', 'relationship', convertIsTreeLink),\n"
	    		        +"$(go.Shape,{stroke:'black'},\n"
	    		          +"new go.Binding('strokeDashArray' , 'relationship', convertLink)),\n"
	    		        +"$(go.Shape, { scale: 1.3, fill: 'white' },\n"
	    		          +"new go.Binding('fromArrow', 'relationship', convertFromArrow)),\n"
	    		        +"$(go.Shape, { scale: 1.3, fill: 'white' },\n"
	    		          +"new go.Binding('toArrow', 'relationship', convertToArrow)),\n"
	    		        +"$(go.TextBlock,\n"
	    		          +"{ segmentIndex: -1, segmentOffset: new go.Point(NaN, NaN),\n"
	    		          +"segmentOrientation: go.Link.OrientUpright },\n"
	    		            +"new go.Binding('text', 'text'))\n"
	    		+"\n"
	    		      +");\n"
	    		    +"// setup a few example class nodes and relationships\n"
	    		    +"var nodedata = "+AnalyseProcessorClasses.array+" \n"
	    		+";\n"

	    		    +"var linkdata = "+GenerateLinkBetweenClassesProcessor.relationship+" \n"
	    		+";\n"
	    		+"\n"
	    		    +"myDiagram.model = $(go.GraphLinksModel,\n"
	    		      +"{\n"
	    		        +"copiesArrays: true,\n"
	    		        +"copiesArrayObjects: true,\n"
	    		        +"nodeDataArray: nodedata,\n"
	    		        +"linkDataArray: linkdata\n"
	    		      +"});\n"
	    		      + "var myOverview = $(go.Overview, 'myOverviewDiv',{ observed: myDiagram });"
	    		  +"}\n"
	    		  + "init();";
	    // Ecriture du fichier Js
	    File f = new File ("classDep.js");
	    try
	    {
	        PrintWriter pw = new PrintWriter (new BufferedWriter (new FileWriter (f)));
	            pw.println (fileContent);
	        pw.close();
	    }
	    catch (IOException exception)
	    {
	        System.out.println ("Erreur lors de la lecture : " + exception.getMessage());
	    }
	    
	  }
}